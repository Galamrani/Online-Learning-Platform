// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineLearning.API;

#nullable disable

namespace OnlineLearning.API.Migrations
{
    [DbContext(typeof(LearningPlatformDbContext))]
    partial class LearningPlatformDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OnlineLearning.API.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4aea7849-3c0e-4a5d-ba7d-59292ffa171d"),
                            CreatedAt = new DateTime(2025, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = new Guid("1afa0c56-8a71-4b23-8dfd-34cbe9d5bd6d"),
                            Description = "A comprehensive course covering the basics of C# programming language, including syntax, data types, and object-oriented concepts.",
                            Title = "Introduction to C# Programming"
                        },
                        new
                        {
                            Id = new Guid("feab60e5-5d25-4df2-ae56-4723bb423d79"),
                            CreatedAt = new DateTime(2025, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = new Guid("1afa0c56-8a71-4b23-8dfd-34cbe9d5bd6d"),
                            Description = "An in-depth guide to working with Entity Framework Core, covering migrations, relationships, and performance optimization.",
                            Title = "Mastering Entity Framework Core"
                        },
                        new
                        {
                            Id = new Guid("fefbefdf-c3bf-4c81-87b9-96abf64d11f3"),
                            CreatedAt = new DateTime(2025, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = new Guid("1afa0c56-8a71-4b23-8dfd-34cbe9d5bd6d"),
                            Description = "Learn how to design and develop robust REST APIs using ASP.NET Core, covering controllers, authentication, and best practices.",
                            Title = "Building RESTful APIs with ASP.NET Core"
                        },
                        new
                        {
                            Id = new Guid("bd6a270f-001e-48bc-8f01-33370452f475"),
                            CreatedAt = new DateTime(2025, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = new Guid("1afa0c56-8a71-4b23-8dfd-34cbe9d5bd6d"),
                            Description = "A hands-on course focused on writing effective unit tests in .NET using xUnit, Moq, and Test-Driven Development (TDD) principles.",
                            Title = "Unit Testing in .NET"
                        });
                });

            modelBuilder.Entity("OnlineLearning.API.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EnrolledAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f0fe16a-21b7-4977-9193-4e8a701656fb"),
                            CourseId = new Guid("4aea7849-3c0e-4a5d-ba7d-59292ffa171d"),
                            EnrolledAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("3a3c377a-873c-4953-9ca2-c422b4ae40da")
                        });
                });

            modelBuilder.Entity("OnlineLearning.API.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e853ab8-9209-4809-8d76-3fd105905bb8"),
                            CourseId = new Guid("4aea7849-3c0e-4a5d-ba7d-59292ffa171d"),
                            Description = "Installation and setup of development environment.",
                            Title = "Getting Started with C#",
                            VideoUrl = "https://www.youtube.com/watch?v=ravLFzIguCM"
                        },
                        new
                        {
                            Id = new Guid("77bdb0e2-4a6a-43f6-b17c-816a24153f06"),
                            CourseId = new Guid("4aea7849-3c0e-4a5d-ba7d-59292ffa171d"),
                            Description = "Understanding variables and different data types in C#.",
                            Title = "Variables and Data Types",
                            VideoUrl = "https://www.youtube.com/watch?v=_D-HCF3jZKk"
                        },
                        new
                        {
                            Id = new Guid("a6a82716-b6fb-419d-b922-48c5518ccda4"),
                            CourseId = new Guid("4aea7849-3c0e-4a5d-ba7d-59292ffa171d"),
                            Description = "Learn about arithmetic, logical, and comparison operators in C#.",
                            Title = "Operators and Expressions",
                            VideoUrl = "https://www.youtube.com/watch?v=WL7QEhdqh00"
                        },
                        new
                        {
                            Id = new Guid("f69240ae-e76c-4f7d-9e62-c9b953082e57"),
                            CourseId = new Guid("feab60e5-5d25-4df2-ae56-4723bb423d79"),
                            Description = "Overview of EF Core and setting up the DbContext.",
                            Title = "Introduction to Entity Framework Core",
                            VideoUrl = "https://www.youtube.com/watch?v=KcFWOMbGJ4M"
                        },
                        new
                        {
                            Id = new Guid("a1a79889-2379-457d-a812-b3c54ae1b02c"),
                            CourseId = new Guid("feab60e5-5d25-4df2-ae56-4723bb423d79"),
                            Description = "How to create and apply migrations in EF Core.",
                            Title = "Working with Migrations",
                            VideoUrl = "https://www.youtube.com/watch?v=ZoKRFVBsm7E"
                        },
                        new
                        {
                            Id = new Guid("06af739c-4ee4-4eaa-b7cc-49fab8816994"),
                            CourseId = new Guid("feab60e5-5d25-4df2-ae56-4723bb423d79"),
                            Description = "Learn how to use LINQ queries in EF Core to fetch data.",
                            Title = "Querying Data with LINQ",
                            VideoUrl = "https://www.youtube.com/watch?v=DuozyaJQQ1U"
                        },
                        new
                        {
                            Id = new Guid("e0db9630-1a6d-4775-baf7-9f8dcd9be612"),
                            CourseId = new Guid("fefbefdf-c3bf-4c81-87b9-96abf64d11f3"),
                            Description = "Understanding controllers, routing, and API responses.",
                            Title = "Building RESTful APIs with ASP.NET Core",
                            VideoUrl = "https://www.youtube.com/watch?v=JiJeZOHx0ow"
                        },
                        new
                        {
                            Id = new Guid("9d11901e-05cf-4239-8b07-0ef92e561e23"),
                            CourseId = new Guid("fefbefdf-c3bf-4c81-87b9-96abf64d11f3"),
                            Description = "Implementing authentication and role-based authorization in ASP.NET Core.",
                            Title = "Authentication and Authorization",
                            VideoUrl = "https://www.youtube.com/watch?v=eUW2CYAT1Nk"
                        });
                });

            modelBuilder.Entity("OnlineLearning.API.Progress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastWatchedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("Progresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("787c70a9-9cef-49b4-8067-1731ed414a1e"),
                            LastWatchedAt = new DateTime(2025, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonId = new Guid("0e853ab8-9209-4809-8d76-3fd105905bb8"),
                            UserId = new Guid("3a3c377a-873c-4953-9ca2-c422b4ae40da")
                        },
                        new
                        {
                            Id = new Guid("85c9f78f-3e74-46eb-a53f-9ad304f45627"),
                            LastWatchedAt = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonId = new Guid("77bdb0e2-4a6a-43f6-b17c-816a24153f06"),
                            UserId = new Guid("3a3c377a-873c-4953-9ca2-c422b4ae40da")
                        },
                        new
                        {
                            Id = new Guid("bfd220df-c171-414f-9a07-908f2e94da74"),
                            LastWatchedAt = new DateTime(2025, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonId = new Guid("0e853ab8-9209-4809-8d76-3fd105905bb8"),
                            UserId = new Guid("b0ea7082-1893-4a8d-8793-2c97d1b1f26c")
                        });
                });

            modelBuilder.Entity("OnlineLearning.API.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1afa0c56-8a71-4b23-8dfd-34cbe9d5bd6d"),
                            Email = "john@example.com",
                            Name = "John",
                            Password = "ol7P+JWmNfXtag31+7OW58hUXbIXMvJm4eFqmepOqbesGfnKytuRXpMeGXyZnPIZDYLSBnrjfzWlkPu4MVPtrw=="
                        },
                        new
                        {
                            Id = new Guid("3a3c377a-873c-4953-9ca2-c422b4ae40da"),
                            Email = "sarah@example.com",
                            Name = "Sarah",
                            Password = "ol7P+JWmNfXtag31+7OW58hUXbIXMvJm4eFqmepOqbesGfnKytuRXpMeGXyZnPIZDYLSBnrjfzWlkPu4MVPtrw=="
                        },
                        new
                        {
                            Id = new Guid("b0ea7082-1893-4a8d-8793-2c97d1b1f26c"),
                            Email = "bart@example.com",
                            Name = "Bart",
                            Password = "ol7P+JWmNfXtag31+7OW58hUXbIXMvJm4eFqmepOqbesGfnKytuRXpMeGXyZnPIZDYLSBnrjfzWlkPu4MVPtrw=="
                        });
                });

            modelBuilder.Entity("OnlineLearning.API.Course", b =>
                {
                    b.HasOne("OnlineLearning.API.User", "Creator")
                        .WithMany("CreatedCourses")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("OnlineLearning.API.Enrollment", b =>
                {
                    b.HasOne("OnlineLearning.API.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineLearning.API.User", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineLearning.API.Lesson", b =>
                {
                    b.HasOne("OnlineLearning.API.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("OnlineLearning.API.Progress", b =>
                {
                    b.HasOne("OnlineLearning.API.Lesson", "Lesson")
                        .WithMany("Progresses")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineLearning.API.User", "User")
                        .WithMany("Progresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineLearning.API.Course", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("OnlineLearning.API.Lesson", b =>
                {
                    b.Navigation("Progresses");
                });

            modelBuilder.Entity("OnlineLearning.API.User", b =>
                {
                    b.Navigation("CreatedCourses");

                    b.Navigation("Enrollments");

                    b.Navigation("Progresses");
                });
#pragma warning restore 612, 618
        }
    }
}
