// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineLearning.API;

#nullable disable

namespace OnlineLearning.API.Migrations
{
    [DbContext(typeof(LearningPlatformDbContext))]
    [Migration("20250316164447_AddTimestamps")]
    partial class AddTimestamps
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OnlineLearning.API.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f52dc15e-90a2-41e7-b51b-baafffeccdd5"),
                            CreatedAt = new DateTime(2025, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = new Guid("50d0cecc-a63a-48a9-9b0c-8a281550cce7"),
                            Description = "A comprehensive course covering the basics of C# programming language.",
                            Title = "Introduction to C# Programming"
                        },
                        new
                        {
                            Id = new Guid("45f9a3ac-00d7-47c4-a36b-83dcc2a06dfd"),
                            CreatedAt = new DateTime(2025, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorId = new Guid("50d0cecc-a63a-48a9-9b0c-8a281550cce7"),
                            Description = "Deep dive into EF Core with practical examples and best practices.",
                            Title = "Advanced Entity Framework Core"
                        });
                });

            modelBuilder.Entity("OnlineLearning.API.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EnrolledAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9103d6cc-15af-4f26-89bb-412f34e5e9c8"),
                            CourseId = new Guid("f52dc15e-90a2-41e7-b51b-baafffeccdd5"),
                            EnrolledAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("c5669be5-af83-416c-be8b-f15cb6da4909")
                        });
                });

            modelBuilder.Entity("OnlineLearning.API.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8797cc75-801c-4335-bbaa-ff7696ccf819"),
                            CourseId = new Guid("f52dc15e-90a2-41e7-b51b-baafffeccdd5"),
                            Description = "Installation and setup of development environment.",
                            Title = "Getting Started with C#",
                            VideoUrl = "https://www.youtube.com/watch?v=ravLFzIguCM"
                        },
                        new
                        {
                            Id = new Guid("fcbaad04-41e2-4d13-b9c2-a04f4011d8f8"),
                            CourseId = new Guid("f52dc15e-90a2-41e7-b51b-baafffeccdd5"),
                            Description = "Understanding variables and different data types in C#.",
                            Title = "Variables and Data Types",
                            VideoUrl = "https://www.youtube.com/watch?v=_D-HCF3jZKk"
                        },
                        new
                        {
                            Id = new Guid("acfebc13-6f6a-4262-aa9e-e50931dd5b96"),
                            CourseId = new Guid("45f9a3ac-00d7-47c4-a36b-83dcc2a06dfd"),
                            Description = "If statements, loops, and switch cases.",
                            Title = "Control Structures",
                            VideoUrl = "https://www.youtube.com/watch?v=IzzNzSXkCMM"
                        },
                        new
                        {
                            Id = new Guid("f4b23748-2c47-4ae9-a3e4-a50c6a0d1090"),
                            CourseId = new Guid("45f9a3ac-00d7-47c4-a36b-83dcc2a06dfd"),
                            Description = "If statements, loops, and switch cases.",
                            Title = "Control Structures",
                            VideoUrl = "https://www.youtube.com/watch?v=IzzNzSXkCMM"
                        },
                        new
                        {
                            Id = new Guid("8269ed3a-9a4a-4ae8-aa44-008eb11e66c9"),
                            CourseId = new Guid("45f9a3ac-00d7-47c4-a36b-83dcc2a06dfd"),
                            Description = "If statements, loops, and switch cases.",
                            Title = "Control Structures",
                            VideoUrl = "https://www.youtube.com/watch?v=IzzNzSXkCMM"
                        });
                });

            modelBuilder.Entity("OnlineLearning.API.Progress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastWatchedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("Progresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d36a1a0-c4b7-4431-85be-5046c7d1abc7"),
                            LastWatchedAt = new DateTime(2025, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonId = new Guid("8797cc75-801c-4335-bbaa-ff7696ccf819"),
                            UserId = new Guid("c5669be5-af83-416c-be8b-f15cb6da4909")
                        },
                        new
                        {
                            Id = new Guid("417d071e-a727-4571-a71d-e2b69ae23865"),
                            LastWatchedAt = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonId = new Guid("fcbaad04-41e2-4d13-b9c2-a04f4011d8f8"),
                            UserId = new Guid("c5669be5-af83-416c-be8b-f15cb6da4909")
                        },
                        new
                        {
                            Id = new Guid("7ae63ef6-6fea-4a98-9dcf-5624a0c57cb6"),
                            LastWatchedAt = new DateTime(2025, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LessonId = new Guid("8797cc75-801c-4335-bbaa-ff7696ccf819"),
                            UserId = new Guid("6a9dba6c-8c4e-428b-90ce-36e713db12d6")
                        });
                });

            modelBuilder.Entity("OnlineLearning.API.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50d0cecc-a63a-48a9-9b0c-8a281550cce7"),
                            Email = "john@example.com",
                            Name = "John",
                            Password = "ol7P+JWmNfXtag31+7OW58hUXbIXMvJm4eFqmepOqbesGfnKytuRXpMeGXyZnPIZDYLSBnrjfzWlkPu4MVPtrw=="
                        },
                        new
                        {
                            Id = new Guid("c5669be5-af83-416c-be8b-f15cb6da4909"),
                            Email = "sarah@example.com",
                            Name = "Sarah",
                            Password = "ol7P+JWmNfXtag31+7OW58hUXbIXMvJm4eFqmepOqbesGfnKytuRXpMeGXyZnPIZDYLSBnrjfzWlkPu4MVPtrw=="
                        },
                        new
                        {
                            Id = new Guid("6a9dba6c-8c4e-428b-90ce-36e713db12d6"),
                            Email = "bart@example.com",
                            Name = "Bart",
                            Password = "ol7P+JWmNfXtag31+7OW58hUXbIXMvJm4eFqmepOqbesGfnKytuRXpMeGXyZnPIZDYLSBnrjfzWlkPu4MVPtrw=="
                        });
                });

            modelBuilder.Entity("OnlineLearning.API.Course", b =>
                {
                    b.HasOne("OnlineLearning.API.User", "Creator")
                        .WithMany("CreatedCourses")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("OnlineLearning.API.Enrollment", b =>
                {
                    b.HasOne("OnlineLearning.API.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineLearning.API.User", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineLearning.API.Lesson", b =>
                {
                    b.HasOne("OnlineLearning.API.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("OnlineLearning.API.Progress", b =>
                {
                    b.HasOne("OnlineLearning.API.Lesson", "Lesson")
                        .WithMany("Progresses")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineLearning.API.User", "User")
                        .WithMany("Progresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineLearning.API.Course", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("OnlineLearning.API.Lesson", b =>
                {
                    b.Navigation("Progresses");
                });

            modelBuilder.Entity("OnlineLearning.API.User", b =>
                {
                    b.Navigation("CreatedCourses");

                    b.Navigation("Enrollments");

                    b.Navigation("Progresses");
                });
#pragma warning restore 612, 618
        }
    }
}
